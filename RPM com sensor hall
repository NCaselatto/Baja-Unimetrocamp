///////////////
// Calibração:
///////////////

const byte PulsesPerRevolution = 1;  // Quantidade de pulsos em cada revolução. Padrão: 2.


const unsigned long ZeroTimeout = 300000;  // Para respostas rapidas, um bom valor seria 100000.
                                           // Para leituras de baixa RPM, um bom valor seria 300000.

// Calibração para alisamento de RPM:
const byte numReadings = 2;  //Número de amostras para alisamento. Quanto mais alto, mais suavização, mas vai
                             //reagir mais devagar a mudanças. 1 = alisamento. Padrão: 2.

/////////////
// Variaveis:
/////////////

volatile unsigned long LastTimeWeMeasured; 
volatile unsigned long PeriodBetweenPulses = ZeroTimeout+1000; 
volatile unsigned long PeriodAverage = ZeroTimeout+1000; 
unsigned long FrequencyRaw;  
unsigned long FrequencyReal;  
unsigned long RPM; 
unsigned int PulseCounter = 1;  
unsigned long PeriodSum; 
unsigned long LastTimeCycleMeasure = LastTimeWeMeasured; 
unsigned long CurrentMicros = micros(); 
unsigned int AmountOfReadings = 1;
unsigned int ZeroDebouncingExtra;  
unsigned long readings[numReadings];  
unsigned long readIndex;  
unsigned long total;  
unsigned long average;  

void setup(){
  Serial.begin(9600); 
  attachInterrupt(digitalPinToInterrupt(2), Pulse_Event, RISING);  
  delay(1000);  
}

void loop(){
  LastTimeCycleMeasure = LastTimeWeMeasured; 
  CurrentMicros = micros(); 
  if(CurrentMicros < LastTimeCycleMeasure)
  {
    LastTimeCycleMeasure = CurrentMicros;
  }

  FrequencyRaw = 10000000000 / PeriodAverage; 
  
  if(PeriodBetweenPulses > ZeroTimeout - ZeroDebouncingExtra || CurrentMicros - LastTimeCycleMeasure > ZeroTimeout - ZeroDebouncingExtra){  
    FrequencyRaw = 0;            // Seta a frêquencia em 0.
    ZeroDebouncingExtra = 2000;  // Altera um pouco o limite para que não oscile.
  }
  else{
    ZeroDebouncingExtra = 0; 
  }

  FrequencyReal = FrequencyRaw / 10000; 

  //Calculo de RPM
  RPM = FrequencyRaw / PulsesPerRevolution * 60;
  RPM = RPM / 10000; 

  total = total - readings[readIndex];  
  readings[readIndex] = RPM;
  total = total + readings[readIndex]; 
  readIndex = readIndex + 1;
  
  if (readIndex >= numReadings){
    readIndex = 0;
  }
  
  average = total / numReadings;

  Serial.print("Period: ");
  Serial.print(PeriodBetweenPulses);
  Serial.print("\tReadings: ");
  Serial.print(AmountOfReadings);
  Serial.print("\tFrequency: ");
  Serial.print(FrequencyReal);
  Serial.print("\tRPM: ");
  Serial.print(RPM);
  Serial.print("\tTachometer: ");
  Serial.println(average);
  
//PWM para variavel RPM, 0 a 4k RPM.  
analogWrite(9, map(RPM, 0, 4000, 0, 255));

//Habilita a função de piscar os leds. 
if(RPM>=3500){
  digitalWrite(10, HIGH);
  delay(100);
  digitalWrite(10, LOW);
}
else{
  digitalWrite(10, LOW);
}
}  // End of loop.


void Pulse_Event(){
  PeriodBetweenPulses = micros() - LastTimeWeMeasured; 
  LastTimeWeMeasured = micros();  

  if(PulseCounter >= AmountOfReadings){
    PeriodAverage = PeriodSum / AmountOfReadings;  
    PulseCounter = 1;  
    PeriodSum = PeriodBetweenPulses;

    int RemapedAmountOfReadings = map(PeriodBetweenPulses, 40000, 5000, 1, 10);  
    RemapedAmountOfReadings = constrain(RemapedAmountOfReadings, 1, 10);  
    AmountOfReadings = RemapedAmountOfReadings;  
  }
  else
  {
    PulseCounter++;  
    PeriodSum = PeriodSum + PeriodBetweenPulses; 
  }
}
